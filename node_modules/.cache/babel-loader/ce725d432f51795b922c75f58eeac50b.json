{"ast":null,"code":"import _classCallCheck from \"D:\\\\Senior Project\\\\RealTimeSignDetection\\\\ReactComputerVisionTemplate\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Senior Project\\\\RealTimeSignDetection\\\\ReactComputerVisionTemplate\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport var PadProgram = /*#__PURE__*/function () {\n  function PadProgram(xShape, paddings, constantValue) {\n    _classCallCheck(this, PadProgram);\n\n    this.variableNames = ['x'];\n    this.outputShape = paddings.map(function (p, i) {\n      return p[0]\n      /* beforePad */\n      + xShape[i] + p[1];\n    }\n    /* afterPad */\n    );\n    var rank = xShape.length;\n    var type = getCoordsDataType(rank);\n    var start = paddings.map(function (p) {\n      return p[0];\n    }).join(',');\n    var end = paddings.map(function (p, i) {\n      return p[0] + xShape[i];\n    }).join(',');\n    var unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n    if (rank === 1) {\n      this.userCode = \"\\n        int start = \".concat(start, \";\\n        int end = \").concat(end, \";\\n        uniform float value;\\n\\n        void main() {\\n          int outC = getOutputCoords();\\n          if (outC < start || outC >= end) {\\n            setOutput(value);\\n          } else {\\n            setOutput(getX(outC - start));\\n          }\\n        }\\n      \");\n      return;\n    }\n\n    this.userCode = \"\\n      \".concat(type, \" start = \").concat(type, \"(\").concat(start, \");\\n      \").concat(type, \" end = \").concat(type, \"(\").concat(end, \");\\n      uniform float value;\\n\\n      void main() {\\n        \").concat(type, \" outC = getOutputCoords();\\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\\n          setOutput(value);\\n        } else {\\n          \").concat(type, \" coords = outC - start;\\n          setOutput(getX(\").concat(unpackedCoords, \"));\\n        }\\n      }\\n    \");\n  }\n\n  _createClass(PadProgram, [{\n    key: \"getCustomSetupFunc\",\n    value: function getCustomSetupFunc(value) {\n      var _this = this;\n\n      return function (gpgpu, webGLProgram) {\n        if (_this.valueLoc == null) {\n          _this.valueLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'value');\n        }\n\n        gpgpu.gl.uniform1f(_this.valueLoc, value);\n      };\n    }\n  }]);\n\n  return PadProgram;\n}();","map":{"version":3,"sources":["../src/pad_gpu.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;;AAmBA,SAAQ,iBAAR,QAAgC,mBAAhC;AAEA,WAAa,UAAb;AAME,sBACI,MADJ,EACsB,QADtB,EAEI,aAFJ,EAEyB;AAAA;;AAPzB,SAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AAQE,SAAK,WAAL,GAAmB,QAAQ,CAAC,GAAT,CACf,UAAC,CAAD,EAAI,CAAJ;AAAA,aAAU,CAAC,CAAC,CAAD;AAAI;AAAL,QAAuB,MAAM,CAAC,CAAD,CAA7B,GAAmC,CAAC,CAAC,CAAD,CAA9C;AAAA;AAAkD;AADnC,KAAnB;AAEA,QAAM,IAAI,GAAG,MAAM,CAAC,MAApB;AACA,QAAM,IAAI,GAAG,iBAAiB,CAAC,IAAD,CAA9B;AAEA,QAAM,KAAK,GAAG,QAAQ,CAAC,GAAT,CAAa,UAAA,CAAC;AAAA,aAAI,CAAC,CAAC,CAAD,CAAL;AAAA,KAAd,EAAwB,IAAxB,CAA6B,GAA7B,CAAd;AACA,QAAM,GAAG,GAAG,QAAQ,CAAC,GAAT,CAAa,UAAC,CAAD,EAAI,CAAJ;AAAA,aAAU,CAAC,CAAC,CAAD,CAAD,GAAO,MAAM,CAAC,CAAD,CAAvB;AAAA,KAAb,EAAyC,IAAzC,CAA8C,GAA9C,CAAZ;AACA,QAAM,cAAc,GAChB,CAAC,WAAD,EAAc,WAAd,EAA2B,WAA3B,EAAwC,WAAxC,EAAqD,KAArD,CAA2D,CAA3D,EAA8D,IAA9D,CADJ;;AAGA,QAAI,IAAI,KAAK,CAAb,EAAgB;AACd,WAAK,QAAL,mCACgB,KADhB,kCAEc,GAFd;AAcA;AACD;;AACD,SAAK,QAAL,qBACI,IADJ,sBACoB,IADpB,cAC4B,KAD5B,uBAEI,IAFJ,oBAEkB,IAFlB,cAE0B,GAF1B,4EAMM,IANN,iLAUQ,IAVR,+DAWuB,cAXvB;AAeD;;AAnDH;AAAA;AAAA,uCAqDqB,KArDrB,EAqDkC;AAAA;;AAC9B,aAAO,UAAC,KAAD,EAAsB,YAAtB,EAAoD;AACzD,YAAI,KAAI,CAAC,QAAL,IAAiB,IAArB,EAA2B;AACzB,UAAA,KAAI,CAAC,QAAL,GAAgB,KAAK,CAAC,yBAAN,CAAgC,YAAhC,EAA8C,OAA9C,CAAhB;AACD;;AACD,QAAA,KAAK,CAAC,EAAN,CAAS,SAAT,CAAmB,KAAI,CAAC,QAAxB,EAAkC,KAAlC;AACD,OALD;AAMD;AA5DH;;AAAA;AAAA","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  valueLoc: WebGLUniformLocation;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n        uniform float value;\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n      uniform float value;\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n\n  getCustomSetupFunc(value: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.valueLoc == null) {\n        this.valueLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'value');\n      }\n      gpgpu.gl.uniform1f(this.valueLoc, value);\n    };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}