{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Senior Project\\\\RealTimeSignDetection\\\\ReactComputerVisionTemplate\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\n\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n\nfunction split(str, delimiters, skipEmpty) {\n  if (!str.length) {\n    return [];\n  } // When the delimiter is empty, the input is split into individual characters.\n\n\n  if (delimiters.length === 0) {\n    var _result = new Array(str.length);\n\n    for (var i = 0; i < str.length; ++i) {\n      _result[i] = str.subarray(i, i + 1);\n    }\n\n    return _result;\n  } // When there is one delimiter, the input is split only at that delimiter.\n\n\n  if (delimiters.length === 1) {\n    var delimiter = delimiters[0];\n    var _result2 = [];\n    var f = str.indexOf(delimiter);\n\n    while (f !== -1) {\n      var token = str.subarray(0, f);\n\n      if (!skipEmpty || token.length !== 0) {\n        _result2.push(token);\n      }\n\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n\n    if (!skipEmpty || str.length !== 0) {\n      _result2.push(str);\n    }\n\n    return _result2;\n  } // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n\n\n  var result = [];\n  var tokenStart = 0;\n\n  for (var _i = 0; _i < str.length + 1; _i++) {\n    if (_i === str.length || delimiters.indexOf(str[_i]) !== -1) {\n      var _token = str.subarray(tokenStart, _i);\n\n      if (!skipEmpty || _token.length !== 0) {\n        result.push(_token);\n      }\n\n      tokenStart = _i + 1;\n    }\n  }\n\n  return result;\n}\n\nexport function stringSplitImpl(input, delimiter, skipEmpty) {\n  var batchSize = input.length; // Empty delimiter means split the input character by character.\n\n  var tokens = [];\n  var outputSize = 0;\n  var maxNumEntries = 0;\n  var numIndices = new Array(batchSize);\n\n  for (var i = 0; i < batchSize; ++i) {\n    var parts = split(input[i], delimiter, skipEmpty);\n    var nEntries = parts.length;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n    tokens.push.apply(tokens, _toConsumableArray(parts));\n  }\n\n  var indices = util.getArrayFromDType('int32', outputSize * 2);\n  var values = new Array(outputSize);\n  var shape = [batchSize, maxNumEntries];\n  var c = 0;\n\n  for (var _i2 = 0; _i2 < batchSize; ++_i2) {\n    for (var j = 0; j < numIndices[_i2]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = _i2;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}","map":{"version":3,"sources":["../../src/kernels/StringSplit_impl.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean): Uint8Array[] {\n  if (!str.length) {\n    return [];\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    const result: Uint8Array[] = new Array(str.length);\n    for (let i = 0; i < str.length; ++i) {\n      result[i] = str.subarray(i, i + 1);\n    }\n    return result;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    const result: Uint8Array[] = [];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return result;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  const result: Uint8Array[] = [];\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n  return result;\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const parts = split(input[i], delimiter, skipEmpty);\n    const nEntries = parts.length;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n    tokens.push(...parts);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}