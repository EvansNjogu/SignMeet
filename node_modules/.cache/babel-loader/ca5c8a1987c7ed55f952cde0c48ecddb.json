{"ast":null,"code":"import _classCallCheck from \"D:\\\\Senior Project\\\\RealTimeSignDetection\\\\ReactComputerVisionTemplate\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Senior Project\\\\RealTimeSignDetection\\\\ReactComputerVisionTemplate\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var RotateProgram = /*#__PURE__*/function () {\n  function RotateProgram(imageShape, fillValue) {\n    _classCallCheck(this, RotateProgram);\n\n    this.variableNames = ['Image'];\n    this.outputShape = [];\n    var imageHeight = imageShape[1];\n    var imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n    var fillSnippet = '';\n\n    if (typeof fillValue === 'number') {\n      fillSnippet = \"float outputValue = \".concat(fillValue.toFixed(2), \";\");\n    } else {\n      fillSnippet = \"\\n        vec3 fill = vec3(\".concat(fillValue.join(','), \");\\n        float outputValue = fill[coords[3]];\");\n    }\n\n    this.userCode = \"\\n        uniform vec4 params;\\n        void main() {\\n          ivec4 coords = getOutputCoords();\\n          int x = coords[2];\\n          int y = coords[1];\\n          float coordXFloat = (float(x) - params[0]) * params[3] -\\n            (float(y) - params[1]) * params[2];\\n          float coordYFloat = (float(x) - params[0]) * params[2] +\\n            (float(y) - params[1]) * params[3];\\n          int coordX = int(round(coordXFloat + params[0]));\\n          int coordY = int(round(coordYFloat + params[1]));\\n          \".concat(fillSnippet, \"\\n          if(coordX >= 0 && coordX < \").concat(imageWidth, \" && coordY >= 0 && coordY < \").concat(imageHeight, \") {\\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\\n          }\\n          setOutput(outputValue);\\n        }\\n    \");\n  }\n\n  _createClass(RotateProgram, [{\n    key: \"getCustomSetupFunc\",\n    value: function getCustomSetupFunc(centerX, centerY, sinFactor, cosFactor) {\n      var _this = this;\n\n      return function (gpgpu, webGLProgram) {\n        if (_this.paramsLoc == null) {\n          _this.paramsLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'params');\n        }\n\n        gpgpu.gl.uniform4f(_this.paramsLoc, centerX, centerY, sinFactor, cosFactor);\n      };\n    }\n  }]);\n\n  return RotateProgram;\n}();","map":{"version":3,"sources":["../src/rotate_gpu.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;;AAoBA,WAAa,aAAb;AAKE,yBACI,UADJ,EAEI,SAFJ,EAE8C;AAAA;;AAN9C,SAAA,aAAA,GAAgB,CAAC,OAAD,CAAhB;AACA,SAAA,WAAA,GAAwB,EAAxB;AAME,QAAM,WAAW,GAAG,UAAU,CAAC,CAAD,CAA9B;AACA,QAAM,UAAU,GAAG,UAAU,CAAC,CAAD,CAA7B;AACA,SAAK,WAAL,GAAmB,UAAnB;AAEA,QAAI,WAAW,GAAG,EAAlB;;AACA,QAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AACjC,MAAA,WAAW,iCAA0B,SAAS,CAAC,OAAV,CAAkB,CAAlB,CAA1B,MAAX;AACD,KAFD,MAEO;AACL,MAAA,WAAW,wCACU,SAAS,CAAC,IAAV,CAAe,GAAf,CADV,qDAAX;AAGD;;AAED,SAAK,QAAL,2hBAYQ,WAZR,oDAamC,UAbnC,yCAcI,WAdJ;AAoBD;;AAzCH;AAAA;AAAA,uCA4CM,OA5CN,EA4CuB,OA5CvB,EA4CwC,SA5CxC,EA4C2D,SA5C3D,EA4C4E;AAAA;;AACxE,aAAO,UAAC,KAAD,EAAsB,YAAtB,EAAoD;AACzD,YAAI,KAAI,CAAC,SAAL,IAAkB,IAAtB,EAA4B;AAC1B,UAAA,KAAI,CAAC,SAAL,GACI,KAAK,CAAC,yBAAN,CAAgC,YAAhC,EAA8C,QAA9C,CADJ;AAED;;AACD,QAAA,KAAK,CAAC,EAAN,CAAS,SAAT,CACI,KAAI,CAAC,SADT,EACoB,OADpB,EAC6B,OAD7B,EACsC,SADtC,EACiD,SADjD;AAED,OAPD;AAQD;AArDH;;AAAA;AAAA","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class RotateProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n  paramsLoc: WebGLUniformLocation;\n  constructor(\n      imageShape: [number, number, number, number],\n      fillValue: number|[number, number, number]) {\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    let fillSnippet = '';\n    if (typeof fillValue === 'number') {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n    }\n\n    this.userCode = `\n        uniform vec4 params;\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${\n        imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n\n  getCustomSetupFunc(\n      centerX: number, centerY: number, sinFactor: number, cosFactor: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.paramsLoc == null) {\n        this.paramsLoc =\n            gpgpu.getUniformLocationNoThrow(webGLProgram, 'params');\n      }\n      gpgpu.gl.uniform4f(\n          this.paramsLoc, centerX, centerY, sinFactor, cosFactor);\n    };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}